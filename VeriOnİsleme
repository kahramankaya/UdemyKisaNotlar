#veri ön işleme :
#veri temizleme(data cleaning/cleasing):
#1-gürültülü veri(noisy data)
#2-eksik veri analizi(mising data analysis)
#3-aykırı gözlem analizi(outlier analysis)

#AYKIRI DEĞERİN ALT VE ÜST SINIRLARINI BULMA:
import seaborn as sns
diamonds=sns.load_dataset("diamonds")
df=diamonds.copy()
p=df["table"]
#alt satırda aykırı değerleri bulmayı boxplot ile bulmuş olduk.
print(sns.boxplot(x=p)) # boxplotta oluşan sağ ve solda ki siyah noktalar aykırı değerleri oluşturur. bu sayede aykırı değerleri bulduk.
# şimdi biz bi değere aykırı değer demek için eşik değer belirlememiz gerekir. şimdi bunu yapacağız.
Q1=p.quantile(0.25) # Veri seti küçükten büyüğe sıralayınca veri setinin yüzde 25 lik indexini verir.
Q3=p.quantile(0.75) # bu da yüzde 75 lik kısmını verir.
print(Q1) # 56.0
IQR=Q3-Q1
alt_sınır=Q1-1.5*IQR
ust_sınır=Q3+1.5*IQR
print(alt_sınır) # 51.5 çıktı. demek ki bunun altında ki değerler aykırı değerlermiş.
print(ust_sınır) # 63.5 cıktı. demek ki bunun ustunde ki degerler yine aynı şekilde aykırı değer olarak alınır.
# aslında boxplotta alt ve ust sınır ıkı cızgı ıe belırlenmıs ama tam net degerlerı boylece bulmus olduk.

print(p<alt_sınır) # burada true false degerlerı cıktı. burada aykırı deger mı degıl mı dıye sorguladık. aykırı deger ıse true degılse false dondur dedık.
print((p<alt_sınır) | (p>ust_sınır)) # alt sınırdan kucuk ve ya ust sınırdan buyuk deger ise aykırıdır ve true dondur degılse false dedık. ortada ki ya da işlemini yaptırdı gıbı dusun.

aykırı_degerler=(p<alt_sınır) | (p>ust_sınır)
print(p[aykırı_degerler]) # fancy ile bu sefer yukarda false donen degerlerın kendısı yazdırdık. bu sayede hangı degerlerın aykırı oldugunu net bır sekılde gorduk. boylece ındexlerı ıle bırlıkte hangısının aykırı oldugunu bulmus olduk.
# ama dıyelım kı sadece aykırı olan degerlerın ındexıne ulaşmak ıstıyoruz o zaman alt satırda kını yapmalısın.
print(p[aykırı_degerler].index) # boylece aykrıı degerlerın sadece ındexını yazdırmıs olduk.

# AYKIRI DEGERLER ILE SAVASMA YONTEMLERIMIZ : SİLME, ORTALAMA İLE DEGISTIRME, BASKILAMA YONTEMLERIDIR.
#SİLME: burada istediğimiz aykırı değeri silme işini yapmış olacağız.
import pandas as pd
df=pd.DataFrame(p)
# şimdi aşağıda bu değerlerin içinden aykırı değerleri çıkarıp tertemiz bir dataframe elde edeceğiz. ve aşağıda ki tilda işareti koşulu sağlamayanları al işine yarar.
t_df=df[~((p<alt_sınır) | (p>ust_sınır))]
print(t_df)

print(df.shape) # (53940, 1)
print(t_df.shape) # (53335, 1) goruldugu uzere  ust satırda kı gozlem bırımı sayısından daha azaldı. demek ki 605 tane aykırı deger varmış.


#ORTALAMA İLE DOLDURMA: bu da yukarda kı sılme ışlemi gibi aykırı degerler ile savaşma şekliimizdir. burada aykırı degerlerin yerine ortalama degerler atıyoruz.
p[aykırı_degerler]=p.mean()
print(p[aykırı_degerler])


# BASKILAMA YÖNTEMİ:
p[aykırı_degerler]=alt_sınır
print(p[aykırı_degerler])


# ÇOK DEĞİŞKENLİ AYKIRI GÖZLEM ANALİZİ:
# LOCAL OUTLİER FACTOR: cok degıskenlı de bu algorıtma kullanılır. tek degıskenlı de ıse basıtce boxplot ıle cozume gıdılebılır.
import seaborn as sns
import pandas as pd
diamonds=sns.load_dataset("diamonds")
diamonds=diamonds.select_dtypes(include=["float64","int64"])
df=diamonds.copy()
df=df.dropna()
df=df["table"]
df1=pd.DataFrame(df)
import numpy as np
from sklearn.neighbors import LocalOutlierFactor # sklearn.neighbors bu kütüphaneden localoutlierfactor fonksıyonunu cektık.
clf=LocalOutlierFactor(n_neighbors=20,contamination=0.1) # birincisi komşu sayısı ikincisi ise yogunluk veren manuel olarak gırılmesı gereken degerlerdır.
df2=clf.fit_predict(df1)
df_scores=clf.negative_outlier_factor_
print(df_scores)


# ÇOK DEĞİŞKENLİ AYKIRI GÖZLEM ANALİZİ:
# LOCAL OUTLİER FACTOR: cok degıskenlı de bu algorıtma kullanılır. tek degıskenlı de ıse basıtce boxplot ıle cozume gıdılebılır.
import seaborn as sns
import pandas as pd
diamonds=sns.load_dataset("diamonds")
diamonds=diamonds.select_dtypes(include=["float64","int64"])
df=diamonds.copy()
df=df.dropna()
df=df["table"]
df1=pd.DataFrame(df)
import numpy as np
from sklearn.neighbors import LocalOutlierFactor # sklearn.neighbors bu kütüphaneden localoutlierfactor fonksıyonunu cektık.
clf=LocalOutlierFactor(n_neighbors=20,contamination=0.1) # birincisi komşu sayısı ikincisi ise yogunluk veren manuel olarak gırılmesı gereken degerlerdır.
df2=clf.fit_predict(df1)
df_scores=clf.negative_outlier_factor_
print(df_scores)
print(np.sort(df_scores)[0:10])
esik_deger=np.sort(df_scores)[12] # -5175000000.96129  biz şuan bu degerı kendımıze esık deger sectik. artık bundan buyuk ya da kucuk degerlerı ıstegımıze gore aykırı degerler olarak alabılırız.
print(esik_deger)
aykırı_tf=df_scores>esik_deger # score lardan esık deger den buyuk degerlerı aykırı dıye kabul ettik.
print(aykırı_deger) # true false seklınde cıktı.
print(df[df_scores>esik_deger]) # aslında bız coklu degıskende sılme ıslemı yapmıs olduk burada. cunku burada aykırı degerlerı almadık.
# mesela burada almadıgımız aykırı degerlerın yerıne ortalama deger de atayabılırız.


















