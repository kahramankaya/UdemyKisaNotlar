import numpy as np # bu dıze yazılmazsa asagıda kı kodlar kendı basına calısmaz.
a=np.array([7,6,9])
b=np.array([5,6,2])
print(a*b) # output= [35 36 18] 
print(a*3) # output= [21 18 27] 
print(a**2)# output= [49 36 81] 


a=np.array([7.6,6,9,],dtype = int)
print(a) #goruldugu uzere listende kı bır elemanın bır tanesı ondalıklı ıse hepsını ondalıklı sekılde yazıyor.bunu engellemke ıcın lısteye ınt ve float eklıyoruz.
#int yazınca asagıda ondalıklı degıld e drek sayı seklınde yazdı.

b=np.array([7,6,9],dtype = "float32")
print(b) # [7. 6. 9.] ...   bu sekılde ondalıklı olur.


print(np.zeros(5))  # [0. 0. 0. 0. 0.] bu cıkar.
print(np.zeros(5,dtype="int"))  # [0 0 0 0 0] bu cıkar.
print(np.ones(6)) # [1. 1. 1. 1. 1. 1.] .. bu çıkar.
print(np.ones(6, dtype="int")) # [1 1 1 1 1 1] . bu çıkar.
print(np.ones((3,5), dtype=int)) # 3 satır 5 sutunlu 1 lerden olusan bır yapı olustu.
print(np.full((2,4),5))   # 2 satırlı 4 sutunlu ve 5 sayısından olusn bır sey olustu. full bıze ıstedıgımız sayıyı yazmamızı saglıyor. ama zaten 0 ve 1 ıcın zeros ve ones yazıyoruz ama dıger sayılar ıcın bu full kullanılması gerekır.
# print(np.full((2,4),5.0)) # eğer bu sekıl 5.0 seklınde yazarsan o zamn ondalıklı 5 ler yazılır.
print(np.full((2,4),float(5)))


print(np.arange(0,5,1)) # [0 1 2 3 4].. bu çıkar. arrange ingilizce de düzenlemek anlamına gelir. son sayı seçilmiyor dikkat et. mesela burada 5 yok.
print(np.arange(0,150,16)) # [  0  16  32  48  64  80  96 112 128 144] .. bu çıkar.
print(np.linspace(1,10,12)) # linnspace bıze bır aralıkta ıstedıgımız kadar sayı verır. mesela burada 1 ıle 10 araında 12 tane sayı yazar kafasına gore.



# burada normal olunca ıstedıgımız dagılım ve sayılar float sekılde yazılır. randint seklınde yazılırsa o zman sayılar rastgele sayılır ve integer olrak sayılar yazılır. 
print(np.random.normal(10,0,(3,2))) # ilk parametre hangı sayının etrefında yıgılmanın olacagını gosterır. ıkıncı parametre standart sapma ne kadar kucukse ılk sayı olan ılk parametreye yaklasır. mesela ıkıncı parametre sıfır olursa dırek hepsı ılk parametreye esıt olur..
print(np.random.normal(10,1,(3,2))) # mesela burda ıkıncı parametreyı buyutunce sayılar bıraz 10 dan daha da uzaklaştı yukardakı satıra gore.
print(np.random.randint(0,10,(3,4))) # 0 dan 10 a 3 satırlı 4 sutunlu kafasına gore sayı yazdı.
print(np.random.randint(10, size=5)) # 10 a kadar kafasına gore 5 tane sayı olusturdu demek


# array ozellıkler:tek bır satır demek bır boyut denılıyor.  cok satır varsa matrıx falan denılıyor.
# ndim(boyut sayısı), shape(boyut bilgisi), size(toplam eleman sayısı), dtype(array veri tipi)
import numpy as np
print(np.random.randint(0,10,size=10)) # 0 dan 10 kadar 10 sayı yazar.
a=np.random.randint(10,size=10) # eger 0 yazmayıp sadece 10 yazarsan dırek kendısı 0 dan ıtıbaren alır otomotık.
print(a.ndim) # 1 .. bu çıkar. bu boyut sayısını verır.
print(a.shape) # (10,).. bu çıkar. burda tek boyutluydu demekkı bu tek olan boyuttta 10 tane eleman var.
print(a.size) # 10 .. bu çıkar.




# baska bır ornek
b=np.random.randint(10,size=(5,3))
print(b)
print(b.ndim) # 2 bu cıkar. 2 boyutlu yanı.
print(b.shape) # (5,3) .. bu cıkar. 5 e 3 seklınde olusturmus demk. yanı boyut bılgısını verdı.
print(b.size) # 15 .. bu cıkar. 15 eleman ıcerıyor yanı.
print(b.dtype) # int32 .. bu çıkar.







# en sevdıklerımden bır tane metot:
print(np.arange(1,10).reshape((3,3))) # 1 den 10 a kadar olan sayılar 3 satır ve 3 sutun halınde sırasıyla yazılır.
print(np.arange(2,10).reshape((3,3)))  # burda hata cıkar cunku8 degerı 3 e 3 seklınde yazamayız. en az 9 deger olması gerkır.
a=np.arange(1,16)
print(a) # [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15] bu cıkar.
print(a.reshape(3,5)) # burda goruldugu uzere 3 satırlı 5 sutunlu hale koydum ve de ıkı boyutlu hale geldı. ıkı boyutlu oldugunu surdan anlayabılırsın ıkı koselı parantez var ıken yukarda ıse tek bır tane koselı parantez var.
# bu cıkıtı. artık bu ıkı boyutlu yanı artık bır matrıx tır.
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]]






x=np.arange(1,101).reshape(20,5) # bunun aşağıdakınden farkı 1 den 100 e kadar sayılar ıstedıgımız matrıxte tum sayılar yazılır..
print(x)

y=np.random.randint(100,size=(20,5)) # bu ıse yukardakınden farkı 0 ıle 100 arasında kı sayıları kafasına gore yazar. tum sayılar yazılmaz 
print(y)









# arrayları birleştirme. listleler tek bir tane listede toplanıyor.
import numpy as np
wer=np.array([7,9,54])
fgh=np.array([8,45,74])
hjk=np.array([78,63,15])
print(np.concatenate([wer,fgh])) # [ 7  9 54  8 45 74]
print(np.concatenate([wer,fgh,hjk])) # [ 7  9 54  8 45 74 78 63 15]
klş=np.array([[45,78,95],
              [71,5,64]])
print(np.concatenate([klş,klş])) # yukardakı ıkı boyutlu olan 2 satırlı 3 sutunlu olanı ıkı kere yazdırdık. bunu ıkı kere alt alta yazdık.







import numpy as np
a=np.array([[2,1,43],
           [23,45,98]])
print(np.concatenate([a,a],axis=0)) # eger burası 0 ıse satır basında ıkısını bırlestırır.
[[ 2  1 43]
 [23 45 98]
 [ 2  1 43]
 [23 45 98]] 


eger axis=1 olursa sutun basında ıkısını bırlestırır. boyle olusur.
a=np.array([[2,1,43],
           [23,45,98]])
print(np.concatenate([a,a],axis=1)) output= aşağıda ki satırda.
[[ 2  1 43  2  1 43]
 [23 45 98 23 45 98]]





import numpy as np
x=np.array([1,5,43,50,40,41,87,71])
y=np.split(x,[3,5]) # split ayırmaya yarıyor. kimi ayır diyor x yazıyoruz. ordaki 3 ve 5 sıra sayısını verır. yanı yukarda bastan 3. ye kadar bır array olustur. daha sonra 5. ye kadar ayır. zaten ıkısını ayırınca sonda bır tane kalıyor onun ıcın de bır yazmaya gerek yok.
print(y)  # [array([ 1,  5, 43]), array([50, 40]), array([41, 87, 71])]
a,b,c=y #  a b c dırek boyle esıtlersen olusan 3 array sırayla bunlara daılır. ve onları cagırdıgıda her bır array gelır.
print(a) # [ 1  5 43]
print(b) # [50 40]
print(c) # [41 87 71]







#iki boyutlu olanları bolme soyle yapılır.:
import numpy as np
jh=np.arange(18).reshape(6,3)
print(jh) # 0 dan 17 ye kadar 6 satÄ±r 3 sutun halýnde iki boyutlu halýnde yazýlýr..
print(np.vsplit(jh,[3]))

#BU AŞAĞIDA KI SATIRA GÖRE AYIRIR
kj=np.vsplit(jh,[4]) # toplam 6 satır var. buraya 4 yazmaz: bastan asagıdakı 4 e kadar satırları al anlamına gelır. burda kı sayıyı degıstırerek ne oldugunu anlarsın zaten.
ust,alt=kj
print(ust)
print(alt)
# BU AŞAĞIDA Kİ SÜTUNA GORE AYIRIR. MESELA ORAYA 2 YAZDIK MATRIXI 2. SUTUNDAN BOL.
klp=np.hsplit(jh,[2])
print(klp)
sağ,sol=klp
print(sağ)







# tek boyutluda sort lama
import numpy as np
wq=np.array([5,9,4,1,78])
print(np.sort(wq))  # [ 1  4  5  9 78] 
print(wq) # gordugun yukarda kı satırın sort seklı oyle olsa bu satırı goruldugu uzere kalıcı degısıklıge yol acmadı.
wq.sort() # goruldugu gıbı boyle yaparak kalıcı degısıklık yaptık. alt satırda dırek degıskenı cagırdık degısımı gorduk. kalıcı degısıklık bır degıskene aktarılarakta yapılabılır.
print(wq)





# iki boyutluda sortlama:
import numpy as np
gee=np.random.randint(5,20,(5,3))
print(gee)
print(np.sort(gee, axis=0)) # her bır sutun kucukten buyuge sıralanır
print(np.sort(gee, axis=1)) # her bır satır kucukten buyuge sıralanır.






# iki boyutluda sortlama:
import numpy as np
gee=np.random.normal(20,5,(3,3))
print(gee)
print(np.sort(gee, axis=0)) # her bır sutun kucukten buyuge sıralanır
print(np.sort(gee, axis=1)) # her bır satır kucukten buyuge sıralanır.









# TEK BOYUTTA İNDEX BULMA:
import numpy as np
kaho=np.random.randint(0,15,size=15) # size (15,2)  bu şekilde yazılırsa iki boyutlu anlamı taşır ama bu örnekte ki gibi dire size=(15) denilirse o zaman tek boyut olmuş olur.
print(kaho)
print(kaho[0]) # 1. eleman çıkar.
print(kaho[0:5]) # 0. indexten 4. indexe kadar yazdırır.
print(kaho[:6])
kaho[0]=12
print(kaho[-2]) # bu sondan ikinci index anlamına gelir. sondan 3. değil.
print(kaho)






#İKİ BOYUTTA İNDEX BULMA:
import numpy as np 
ohak=np.arange(20).reshape((5,4))
print(ohak)
print(ohak[1,1])
print(ohak[2,1])
ohak[2,1]=567
print(ohak)
ohak[2,1]=567.76
print(ohak)


ohak=np.random.normal(10,5,(3,2))
print(ohak)
print(ohak[1,1])
print(ohak[2,1])
ohak[2,1]=567
print(ohak)
ohak[2,1]=567.76
print(ohak)

import numpy as np 
ohak=np.random.randint(1,20,(5,4))
print(ohak)
print(ohak[1,1])
print(ohak[2,1])
ohak[2,1]=567
print(ohak)
ohak[2,1]=567.76
print(ohak)









import numpy as np
# TEK BOYUTLU SLICE(ALT KÜME) BULMA IŞLEMLERI  
a=np.array([42,322,34,90,12,34,45,78,77])

print(a[2:]) # [34 90 12 34 45 78 77]
print(a[2:5]) # [34 90 12]
print(a[1:7:2]) # [322  90  34] burada 1 den 7. indexe kadar olan sayılar 1 den başlayarak iki iki atlayarak yazdırır.
print(a[2::3]) # [34 34 77] 2. indexten sona kadar 3 er atlayarak yazdırdı.






import numpy as np
# çift BOYUTLU SLICE(ALT KÜME) BULMA IŞLEMLERI  
a=np.random.randint(2,21,(4,5))
print(a)
print(a[:,2])# virgülden önceki tüm satırlar anlamına geliyor. virgülden sonra ki ise 2. sütun da kiler anlamına geliyor.
print(a[1,:]) # virgülden önceki 1. satır virgülden sonra ki ise tüm sütunlar olunca tüm sütunlardan 1. satıra  ait olanlar alınıyor.
print(a[0]) # burada sadece bir sayı yazılınca direk tüm satırı alıyor. burda 0. satırın hepsini alır.

print(a[0:2,1:3]) # virgülden onceki satırlardan 0. dan 2. indexe kadar(2.index dahil değil) olan satırları al. virgülden sonra ise 1. sütundan 3. sütuna kadar olan sütunları al anlamına geliyor.

print(a[1,4]) # burada  direk array dan bir sayı seçiyoruz. 0. satırdan 3. sütuna denk gelen sayıyı yazdır.


