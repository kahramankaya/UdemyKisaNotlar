import seaborn as sns
planets=sns.load_dataset("planets")
print(planets)
#                method  number  orbital_period   mass  distance  year
# 0     Radial Velocity       1      269.300000   7.10     77.40  2006
# 1     Radial Velocity       1      874.774000   2.21     56.95  2008
# 2     Radial Velocity       1      763.000000   2.60     19.84  2011
# 3     Radial Velocity       1      326.030000  19.40    110.62  2007
# 4     Radial Velocity       1      516.220000  10.50    119.47  2009
# ...               ...     ...             ...    ...       ...   ...
# 1030          Transit       1        3.941507    NaN    172.00  2006
# 1031          Transit       1        2.615864    NaN    148.00  2007
# 1032          Transit       1        3.191524    NaN    174.00  2007
# 1033          Transit       1        4.125083    NaN    293.00  2008
# 1034          Transit       1        4.187757    NaN    260.00  2008

# [1035 rows x 6 columns]


print(planets.head(2))
#             method  number  orbital_period  mass  distance  year
# 0  Radial Velocity       1         269.300  7.10     77.40  2006
# 1  Radial Velocity       1         874.774  2.21     56.95  2008

df=planets.copy() # bu şekilde ana yapıyı değiştirmeden kopyalama işlemi ile istediğimiz işlemi yaptırabildik.
print(df.head())
​#             method  number  orbital_period   mass  distance  year
# 0  Radial Velocity       1         269.300   7.10     77.40  2006
# 1  Radial Velocity       1         874.774   2.21     56.95  2008
# 2  Radial Velocity       1         763.000   2.60     19.84  2011
# 3  Radial Velocity       1         326.030  19.40    110.62  2007
# 4  Radial Velocity       1         516.220  10.50    119.47  2009

print(df.info()) # değişken hakkında bilgi sahibi olduk.
# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 1035 entries, 0 to 1034
# Data columns (total 6 columns):
#  #   Column          Non-Null Count  Dtype  
# ---  ------          --------------  -----  
#  0   method          1035 non-null   object 
#  1   number          1035 non-null   int64  
#  2   orbital_period  992 non-null    float64
#  3   mass            513 non-null    float64
#  4   distance        808 non-null    float64
#  5   year            1035 non-null   int64  
# dtypes: float64(3), int64(2), object(1)
# memory usage: 48.6+ KB
# None
# [1035 rows x 6 columns]>



print(df.dtypes) # sadece değişkenlere ulaştık bu sayede.
# method             object
# number              int64
# orbital_period    float64
# mass              float64
# distance          float64
# year                int64
# dtype: object




import seaborn as sns
planets=sns.load_dataset("planets")
print(planets)
#                method  number  orbital_period   mass  distance  year
# 0     Radial Velocity       1      269.300000   7.10     77.40  2006
# 1     Radial Velocity       1      874.774000   2.21     56.95  2008
# 2     Radial Velocity       1      763.000000   2.60     19.84  2011
# 3     Radial Velocity       1      326.030000  19.40    110.62  2007
# 4     Radial Velocity       1      516.220000  10.50    119.47  2009
# ...               ...     ...             ...    ...       ...   ...
# 1030          Transit       1        3.941507    NaN    172.00  2006
# 1031          Transit       1        2.615864    NaN    148.00  2007
# 1032          Transit       1        3.191524    NaN    174.00  2007
# 1033          Transit       1        4.125083    NaN    293.00  2008
# 1034          Transit       1        4.187757    NaN    260.00  2008

# [1035 rows x 6 columns]


print(planets.head(2))
#             method  number  orbital_period  mass  distance  year
# 0  Radial Velocity       1         269.300  7.10     77.40  2006
# 1  Radial Velocity       1         874.774  2.21     56.95  2008

df=planets.copy() # bu şekilde ana yapıyı değiştirmeden kopyalama işlemi ile istediğimiz işlemi yaptırabildik.
print(df.head())
# ​#             method  number  orbital_period   mass  distance  year
# 0  Radial Velocity       1         269.300   7.10     77.40  2006
# 1  Radial Velocity       1         874.774   2.21     56.95  2008
# 2  Radial Velocity       1         763.000   2.60     19.84  2011
# 3  Radial Velocity       1         326.030  19.40    110.62  2007
# 4  Radial Velocity       1         516.220  10.50    119.47  2009




print(df.dtypes) # sadece değişkenlere ulaştık bu sayede.
# method             object
# number              int64
# orbital_period    float64
# mass              float64
# distance          float64
# year                int64
# dtype: object



print(df.shape)
# (1035, 6)
print(df.columns)
# Index(['method', 'number', 'orbital_period', 'mass', 'distance', 'year'], dtype='object')
print(df.describe()) # bunun sayesinde bütün sayısal değerler ulaştık. gördüğün gibi hepsi sayısal.
#             number  orbital_period        mass     distance         year
# count  1035.000000      992.000000  513.000000   808.000000  1035.000000
# mean      1.785507     2002.917596    2.638161   264.069282  2009.070531
# std       1.240976    26014.728304    3.818617   733.116493     3.972567
# min       1.000000        0.090706    0.003600     1.350000  1989.000000
# 25%       1.000000        5.442540    0.229000    32.560000  2007.000000
# 50%       1.000000       39.979500    1.260000    55.250000  2010.000000
# 75%       2.000000      526.005000    3.040000   178.500000  2012.000000
# max       7.000000   730000.000000   25.000000  8500.000000  2014.000000

print(df.describe().T) # sütunları ve satırları yer değiştirir.
#                  count         mean           std          min         25%  \
# number          1035.0     1.785507      1.240976     1.000000     1.00000   
# orbital_period   992.0  2002.917596  26014.728304     0.090706     5.44254   
# mass             513.0     2.638161      3.818617     0.003600     0.22900   
# distance         808.0   264.069282    733.116493     1.350000    32.56000   
# year            1035.0  2009.070531      3.972567  1989.000000  2007.00000   

#                       50%       75%       max  
# number             1.0000     2.000       7.0  
# orbital_period    39.9795   526.005  730000.0  
# mass               1.2600     3.040      25.0  
# distance          55.2500   178.500    8500.0  
# year            2010.0000  2012.000    2014.0  

print(df.describe(include="all").T) # böylece sadece sayısal değil de tümüne ulaştık.

#                  count unique              top freq         mean  \
# method            1035     10  Radial Velocity  553          NaN   
# number          1035.0    NaN              NaN  NaN     1.785507   
# orbital_period   992.0    NaN              NaN  NaN  2002.917596   
# mass             513.0    NaN              NaN  NaN     2.638161   
# distance         808.0    NaN              NaN  NaN   264.069282   
# year            1035.0    NaN              NaN  NaN  2009.070531   

#                          std       min      25%      50%      75%       max  
# method                   NaN       NaN      NaN      NaN      NaN       NaN  
# number              1.240976       1.0      1.0      1.0      2.0       7.0  
# orbital_period  26014.728304  0.090706  5.44254  39.9795  526.005  730000.0  
# mass                3.818617    0.0036    0.229     1.26     3.04      25.0  
# distance          733.116493      1.35    32.56    55.25    178.5    8500.0  
# year                3.972567    1989.0   2007.0   2010.0   2012.0    2014.0 















import seaborn as sns
planets=sns.load_dataset("planets")
df1=planets.copy()
print(df1.isnull().values.any()) # df1 de herhangi bir değerde hata var mı dedik? var dedi output.
# True

# her değişkende kaç tane eksik var demek için aşağıda ki kodu çalıştırıyoruz.
print(df1.isnull().sum()) # output değişkenlerde mesela method değişkeninde eksik yok dedi ama distance de 227 tane var ded,
# method              0
# number              0
# orbital_period     43
# mass              522
# distance          227
# year                0
# dtype: int64


# biz her değişkende eksik değer yerlerini 0 layabiliriz. kod aşağıda. df1.["değişkenin_ismi"].fillna(0,inplace=True)
df1["distance"].fillna(0,inplace=True) # böylece distance değişkeninde eksik değerleri yok ettik.
print(df1.isnull().sum())
# None
# method              0
# number              0
# orbital_period     43
# mass              522
# distance            0
# year                0
# dtype: int64


df1["distance"].fillna(df1.mass.mean(),inplace=True) # böyle yapınca distance değişkeninin eksik değerinin yerine onun ortalamasını yazdırdık.
print(df1.isnull().sum())


# bütün değerler için ortalamayı yazdırmak istersek aşğıdaki kodu yaz.
df1.fillna(df1.mean() , inplace=True)
print(df1.isnull().sum())
# method            0
# number            0
# orbital_period    0
# mass              0
# distance          0
# year              0
# dtype: int64










import seaborn as sns
planets=sns.load_dataset("planets")
df2=planets.copy()
#kategorik değişkenleri seçme ve özetleme işlemleri aşağıda ki kod.
df3=df2.select_dtypes(include=["object"]) # istediğimiz tipe göre değişken seçmeye yarar.
print(df3.tail(20)) # tek bir tane kategorik değişken olduğu için bu çıktı.
#        method
# 1015  Transit
# 1016  Transit
# 1017  Transit
# 1018  Transit
# 1019  Transit
# 1020  Transit
# 1021  Transit
# 1022  Transit
# 1023  Transit
# 1024  Transit
# 1025  Transit
# 1026  Transit
# 1027  Imaging
# 1028  Transit
# 1029  Imaging
# 1030  Transit
# 1031  Transit
# 1032  Transit
# 1033  Transit
# 1034  Transit

print(df3.method.unique()) # böylece method kategorik değikeninde bulunan tüm sınıfları yazdırdık.
# ['Radial Velocity' 'Imaging' 'Eclipse Timing Variations' 'Transit'
#  'Astrometry' 'Transit Timing Variations' 'Orbital Brightness Modulation'
#  'Microlensing' 'Pulsar Timing' 'Pulsation Timing Variations']

# yukarıda ki sınıflar çok fazla sayamayız. bunların sayısını öğrenmek için yani kategorik değişken sınıfının frekansını öğrenmek için aşağıda ki kodu yazdır.
print(df3.method.value_counts().count())
# 10 çıkar. 10 tane varmış demek ki.
print(df3.method.value_counts())
# Radial Velocity                  553
# Transit                          397
# Imaging                           38
# Microlensing                      23
# Eclipse Timing Variations          9
# Pulsar Timing                      5
# Transit Timing Variations          4
# Orbital Brightness Modulation      3
# Astrometry                         2
# Pulsation Timing Variations        1
# Name: method, dtype: int64



#önemli: yukarıda ki değerleri grafiğe aktardık aşağıda ki kod sayesinde.
# aşağıda ki kod sayesinde gerçek bir grafik oluştu burda gözükmüyor tabii.
print(df3.method.value_counts().plot.barh()) # bar grafiği çıktı.






import seaborn as sns
planets=sns.load_dataset("planets")
df2=planets.copy()
df4=df2.select_dtypes(include=["float64","int64"])
print(df4)
#       number  orbital_period   mass  distance  year
# 0          1      269.300000   7.10     77.40  2006
# 1          1      874.774000   2.21     56.95  2008
# 2          1      763.000000   2.60     19.84  2011
# 3          1      326.030000  19.40    110.62  2007
# 4          1      516.220000  10.50    119.47  2009
# ...      ...             ...    ...       ...   ...
# 1030       1        3.941507    NaN    172.00  2006
# 1031       1        2.615864    NaN    148.00  2007
# 1032       1        3.191524    NaN    174.00  2007
# 1033       1        4.125083    NaN    293.00  2008
# 1034       1        4.187757    NaN    260.00  2008

# [1035 rows x 5 columns]

print(df4["distance"].describe().T) # sadece distance değişkeni için gösterdik.
# count     808.000000
# mean      264.069282
# std       733.116493
# min         1.350000
# 25%        32.560000
# 50%        55.250000
# 75%       178.500000
# max      8500.000000
# Name: distance, dtype: float64














import seaborn as sns
df=sns.load_dataset("diamonds")
print(df.head())
#    carat      cut color clarity  depth  table  price     x     y     z
# 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
# 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
# 2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
# 3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
# 4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75

print(df.info())
#veriyi okuyalım aşağıdan: dataframe imiş. daha sonra 10 tane değişkeni varmış. daha sonra 3 tane kategorik değişken iken 7(6 tane float64 + 1 tane int64) tanesi de sayısal değişken imiş
# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 53940 entries, 0 to 53939
# Data columns (total 10 columns):
#  #   Column   Non-Null Count  Dtype   
# ---  ------   --------------  -----   
#  0   carat    53940 non-null  float64 
#  1   cut      53940 non-null  category
#  2   color    53940 non-null  category
#  3   clarity  53940 non-null  category
#  4   depth    53940 non-null  float64 
#  5   table    53940 non-null  float64 
#  6   price    53940 non-null  int64   
#  7   x        53940 non-null  float64 
#  8   y        53940 non-null  float64 
#  9   z        53940 non-null  float64 
# dtypes: category(3), float64(6), int64(1)
# memory usage: 3.0 MB

print(df.describe().T)
#          count         mean          std    min     25%      50%      75%  
# carat  53940.0     0.797940     0.474011    0.2    0.40     0.70     1.04   
# depth  53940.0    61.749405     1.432621   43.0   61.00    61.80    62.50   
# table  53940.0    57.457184     2.234491   43.0   56.00    57.00    59.00   
# price  53940.0  3932.799722  3989.439738  326.0  950.00  2401.00  5324.25   
# x      53940.0     5.731157     1.121761    0.0    4.71     5.70     6.54   
# y      53940.0     5.734526     1.142135    0.0    4.72     5.71     6.54   
# z      53940.0     3.538734     0.705699    0.0    2.91     3.53     4.04   

# YUKARDAKİNİN SAĞA DOĞRU DEVAMI
#             max  
# carat      5.01  
# depth     79.00  
# table     95.00  
# price  18823.00  
# x         10.74  
# y         58.90  
# z         31.80  


print(df["cut"].value_counts()) # cut değişkeninin sınıflarına ulaştık bu sayede.
# Ideal        21551
# Premium      13791
# Very Good    12082
# Good          4906
# Fair          1610
# Name: cut, dtype: int64

print(df["cut"].value_counts().count()) # cut değişkeninin sınıf sayısını verdi bize.
# 5










# ordinal tanımlama

import seaborn as sns
diamonds=sns.load_dataset("diamonds")
from pandas.api.types import CategoricalDtype
print(diamonds.head())
print(diamonds.info())
print(diamonds["cut"].head())

diamonds.cut=diamonds.cut.astype(CategoricalDtype(ordered=True))
print(diamonds.cut)
# 0            Ideal
# 1          Premium
# 2             Good
# 3          Premium
# 4             Good
#            ...    
# 53935        Ideal
# 53936         Good
# 53937    Very Good
# 53938      Premium
# 53939        Ideal
# Name: cut, Length: 53940, dtype: category
# Categories (5, object): ['Ideal' < 'Premium' < 'Very Good' < 'Good' < 'Fair']


print(diamonds.dtypes)
# carat       float64
# cut        category
# color      category
# clarity    category
# depth       float64
# table       float64
# price         int64
# x           float64
# y           float64
# z           float64
# dtype: object



cut_categories=["fair","good","very good","premium","ideal"]
diamonds.cut=diamonds.cut.astype(CategoricalDtype(categories=cut_categories , ordered=True)) # # Categories (5, object): ['Ideal' < 'Premium' < 'Very Good' < 'Good' < 'Fair'] yukarıda böyle kafasına göre bir sıralama yapılmış. iz bunu kendimize göre ayarlamak için bu şekilde kod yazdık.
print(diamonds.head)
# 0    NaN
# 1    NaN
# 2    NaN
# 3    NaN
# 4    NaN
# Name: cut, dtype: category
# Categories (5, object): ['fair' < 'good' < 'very good' < 'premium' < 'ideal']














# barplot
import seaborn as sns
d=sns.load_dataset("diamonds")

cut_categories=["fair","good","very good","premium","ideal"]
d.cut=d.cut.astype(CategoricalDtype(categories=cut_categories , ordered=True))

print(d.head())
print(d["cut"].value_counts().plot.barh()) # çok güzel bir grafik elde ediyoruz bunun sayesinde.

# aşağıda ki kod sayesinde grafiğin üstüne başlık ekledik.
print(d["cut"].value_counts().plot.barh().set_title("Cut değişkeninin sınıf frekansları"))

# aşağıa yukardan farklı olrak başa ve sona birer paranez koyduk. bu sayesede uzun satırlı bir kodu bu şekilde de kullanabildik.
print((d["cut"].value_counts().
       plot.barh().
       set_title("Cut değişkeninin sınıf frekansları")))


#barplot
# bu aşağıda ki kod parcacıkları ile yukardakı uzun yolu kısalttık.
print(sns.barplot(x="cut", y=d.cut.index, data=d))
print(sns.barplot(x="cut", y=d.cut.index, data=d).set_title("Cut değişkeninin sınıf frekansları"))


print(sns.catplot(x="cut", y=d["price"], data=d))











































